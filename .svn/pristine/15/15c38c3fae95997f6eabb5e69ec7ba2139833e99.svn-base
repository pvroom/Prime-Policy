// Components, functions, plugins
import { Injectable } from '@angular/core';
import { SQLite, SQLiteObject } from '@ionic-native/sqlite';
import { Platform, AlertController } from 'ionic-angular';
import { Http } from '@angular/http';
import 'rxjs/add/operator/catch';
import { Localstorage } from './../../providers/localstorage/localstorage';

declare var formatTime: any;
declare var dateFormat: any;

// ------------------------
// Index to functions
// 
// Agenda			1875
// Database Stats	2492
// Evaluations		478
// Messaging		3122
// Misc				2171
// Notes			2327
// Program Guide	958
// Settings			886
// Speakers			1478
// 
// ------------------------


// Global URL and conference year referenceused for all AJAX-to-MySQL calls
var APIURLReference: string = "https://primepolicy.convergence-us.com/flyinPlanner.php?";

@Injectable()
export class Database {

	/* Setup page variables */
	public DevicePlatform: string;
    private storage: SQLite;
    private isOpen: boolean;
	private db: SQLiteObject;
	 
    public constructor(public pltfrm: Platform, 
						public httpCall: Http,
						public alertCtrl: AlertController,
						private sqlite: SQLite,
						private localstorage: Localstorage) {


			// Determine platform that the app is running on
			this.DevicePlatform = "Browser";
			pltfrm.ready().then(() => {

				if (pltfrm.is('android')) {
					console.log("Database: Running on Android device");
					this.DevicePlatform = "Android";
				}
				if (pltfrm.is('ios')) {
					console.log("Database: Running on iOS device");
					this.DevicePlatform = "iOS";
				}
				
				console.log("Database: App DB platform: " + this.DevicePlatform);
				
				if (this.DevicePlatform == "iOS" || this.DevicePlatform == "Android") {

					this.isOpen = true;
					console.log("Database: Local SQLite database is now available.");
					
				} else {
									
					this.isOpen = true;
					console.log("Database: Network database is now available.");
		
				}
			});

	}

	// -----------------------------------
	// 
	// Congressional Member Database Functions
	// 
	// -----------------------------------
	public getCongressionalData(flags, AttendeeID) {

		console.log("getCongressionalData: flags passed: " + flags);
		var SQLquery = "";

		if (this.DevicePlatform == "iOS" || this.DevicePlatform == "Android") {
			
			console.log('getCongressionalData: Pull data from SQLite');
			var flagValues = flags.split("|");		// Split concatenated values
			var listingType = flagValues[0];			// Listing Type
			var sortOrder = flagValues[1];    		// Specific date of sessions
			var chamberID = flagValues[2];    		// Output sort order
			var QueryParam = flagValues[3];			// Specific course ID
			var congressionalMemberID = flagValues[4];			// Search parameters

			if (listingType == "li" || listingType == "sr") {	// List of speakers
			
				// Split search terms by space to create WHERE clause
				SQLquery = "SELECT DISTINCT cm.congressionalMemberID, cm.FirstName, cm.LastName, cm.MiddleInitial, ";
				SQLquery = SQLquery + "cm.Suffix, cm.Party, cm.State, ls.StateFullname, cm.imageFilename, '1' AS CongressionalMember, ";
				SQLquery = SQLquery + "cm.District, CAST(cm.District AS UNSIGNED) AS SortNum ";
				SQLquery = SQLquery + "FROM congressional_members cm ";
				SQLquery = SQLquery + "INNER JOIN lookup_state ls ON ls.StateLetter = cm.State ";
				SQLquery = SQLquery + "WHERE cm.ActiveYN = 'Y' ";
				SQLquery = SQLquery + "AND Chamber = '" + chamberID + "' ";

				if (listingType == "sr") {		// If searching, then add where clause criteria
					// Split search terms by space to create WHERE clause
					var whereClause = 'WHERE (';
					var searchTerms = QueryParam.split(" ");
					
					for (var i = 0; i < searchTerms.length; i++){
						whereClause = whereClause + 'cm.SearchField LIKE "%' + searchTerms[i] + '%" AND ';
					}
					// Remove last AND from where clause
					whereClause = whereClause.substring(0, whereClause.length-5);        
					whereClause = whereClause + ') ';
					SQLquery = SQLquery + whereClause ;
				}
				if (sortOrder == "Alpha") {
					SQLquery = SQLquery + "ORDER BY LastName, FirstName";
				}
				if (sortOrder == "State") {
					if (chamberID == "Senate") {
						SQLquery = SQLquery + "ORDER BY StateFullname, LastName, FirstName";
					} else {
						SQLquery = SQLquery + "ORDER BY StateFullname, SortNum, LastName, FirstName";
					}
				}
			}

			if (listingType == "dt") {	// Details of Congressional Member
				SQLquery = "SELECT DISTINCT cm.congressionalMemberID, cm.FirstName, cm.LastName, cm.MiddleInitial, ";
				SQLquery = SQLquery + "cm.Suffix, cm.Party, ls.StateFullname, cm.imageFilename, cm.Chamber, cm.District, cm.Bio, cm.Website, ";
				SQLquery = SQLquery + "cm.Email, cm.Phone, cm.Address, cm.City, cm.AddressState, cm.Zipcode, cm.TwitterAccount, cm.FacebookURL, ";
				SQLquery = SQLquery + "fm.mapX AS OfficeX, fm.mapY AS OfficeY, fm.RoomID AS RoomNumber ";
				SQLquery = SQLquery + "FROM congressional_members cm ";
				SQLquery = SQLquery + "INNER JOIN lookup_state ls ON ls.StateLetter = cm.State ";
				SQLquery = SQLquery + "LEFT OUTER JOIN floorplan_mapping fm ON fm.mappingID = cm.mappingID ";
				SQLquery = SQLquery + "WHERE cm.ActiveYN = 'Y' ";
				SQLquery = SQLquery + "AND cm.congressionalMemberID = " + congressionalMemberID + " ";
			}

			if (listingType == "cl") {	// Committee listing for specific congressional member
				SQLquery = "SELECT c.CommitteeName, c.Website ";
				SQLquery = SQLquery + "FROM lookup_committees c ";
				SQLquery = SQLquery + "INNER JOIN congressional_members_committees cmc ON cmc.committeeID = c.committeeID ";
				SQLquery = SQLquery + "WHERE cmc.congressionalMemberID = " + congressionalMemberID + " ";
				SQLquery = SQLquery + "AND c.ActiveYN = 'Y' ";
				SQLquery = SQLquery + "ORDER BY c.CommitteeName";
			}
			
			if (listingType == "cd") {	// List of congressional members for specific meeting
				SQLquery = "SELECT cm.* ";
				SQLquery = SQLquery + "FROM congressional_members cm ";
				SQLquery = SQLquery + "INNER JOIN meetings m ON m.congressionalMemberID = cm.congressionalMemberID ";
				SQLquery = SQLquery + "WHERE m.meetingID = " + congressionalMemberID + " ";
				SQLquery = SQLquery + "ORDER BY cm.LastName, cm.FirstName";
			}

			console.log("Congressional Members Query: " + SQLquery);

			// Perform query against local SQLite database
			return new Promise(resolve => {
				
				this.sqlite.create({name: 'flyinPlanner.db', location: 'default', createFromLocation: 1}).then((db: SQLiteObject) => {

					console.log('Database: Opened DB for congressional members query');
					
					this.db = db;
					
					console.log('Database: Set congressional members query db variable');
					
					this.db.executeSql(SQLquery, {}).then((data) => {
						console.log('Database: congressional members query: ' + JSON.stringify(data));
						console.log('Database: congressional members query rows: ' + data.rows.length);
						let DatabaseResponse = [];
						if(data.rows.length > 0) {
							for(let i = 0; i < data.rows.length; i++) {
								if (listingType == "li" || listingType == "sr") {
									DatabaseResponse.push({
										congressionalMemberID: data.rows.item(i).congressionalMemberID,
										LastName: data.rows.item(i).LastName,
										FirstName: data.rows.item(i).FirstName,
										MiddleInitial: data.rows.item(i).MiddleInitial,
										Suffix: data.rows.item(i).Suffix,
										Party: data.rows.item(i).Party,
										State: data.rows.item(i).State,
										District: data.rows.item(i).District,
										StateFullname: data.rows.item(i).StateFullname,
										imageFilename: data.rows.item(i).imageFilename,
										CongressionalMember: data.rows.item(i).CongressionalMember
									});
								}
								if (listingType == "dt") {
									DatabaseResponse.push({
										congressionalMemberID: data.rows.item(i).congressionalMemberID,
										LastName: data.rows.item(i).LastName,
										FirstName: data.rows.item(i).FirstName,
										MiddleInitial: data.rows.item(i).MiddleInitial,
										Suffix: data.rows.item(i).Suffix,
										Party: data.rows.item(i).Party,
										Chamber: data.rows.item(i).Chamber,
										StateFullname: data.rows.item(i).StateFullname,
										imageFilename: data.rows.item(i).imageFilename,
										District: data.rows.item(i).District,
										Bio: data.rows.item(i).Bio,
										Website: data.rows.item(i).Website,
										Email: data.rows.item(i).Email,
										Phone: data.rows.item(i).Phone,
										Address: data.rows.item(i).Address,
										City: data.rows.item(i).City,
										AddressState: data.rows.item(i).AddressState,
										Zipcode: data.rows.item(i).Zipcode,
										TwitterAccount: data.rows.item(i).TwitterAccount,
										FacebookURL: data.rows.item(i).FacebookURL,
										OfficeX: data.rows.item(i).OfficeX,
										OfficeY: data.rows.item(i).OfficeY,
										RoomNumber: data.rows.item(i).RoomNumber
									});
								}
								if (listingType == "cl") {
									DatabaseResponse.push({
										CommitteeName: data.rows.item(i).CommitteeName,
										Website: data.rows.item(i).Website,
									});
								}
							}
						}
						resolve(DatabaseResponse);
					})
					.catch(e => console.log('Database: congressional members query error: ' + JSON.stringify(e)))
				});
				console.log('Database: congressional members query complete');

			});

			
		} else {
			
			console.log('getCongressionalData: Pull data from MySQL');

			// Perform query against server-based MySQL database
			var url = APIURLReference + "action=cmquery&flags=" + flags + "&AttendeeID=" + AttendeeID;

			return new Promise(resolve => {
				this.httpCall.get(url).subscribe(
					response => {
						console.log("Database: Congressional Member data: " + JSON.stringify(response.json()));
						resolve(response.json());
					},
					err => {
						if (err.status == "412") {
							console.log("App and API versions don't match.");
							var emptyJSONArray = {};
							resolve(emptyJSONArray);
						} else {
							console.log(err.status);
							console.log("API Error: ", err);
						}
					}
				);
			});
		}	
    }


	// -----------------------------------
	// 
	// Agenda Database Functions
	// 
	// -----------------------------------
	public getAgendaData(flags, AttendeeID) {

		console.log("Database: flags passed: " + flags);
		console.log("Database: AttendeeID passed: " + AttendeeID);

		var re = /\'/gi; 

		var flagValues = flags.split("|");
		var listingType = flagValues[0];
		var selectedDay = flagValues[1];
		var EventID = flagValues[2];
		var EventStartTime = flagValues[3];
		var EventEndTime = flagValues[4];
		var EventLocation = flagValues[5];
		//EventLocation = EventLocation.replace(re, "''");
		var EventName = flagValues[6];
		//EventName = EventName.replace(re, "''");
		var EventDate = flagValues[7];
		var AAOID = flagValues[8];
		var LastUpdated = flagValues[9];
		var EventDescription = flagValues[10];
		//EventDescription = EventDescription.replace(re, "''");
		var SQLquery = "";

		
		// Perform query against server-based MySQL database
		var url = APIURLReference + "action=agendaquery&flags=" + flags + "&AttendeeID=" + AttendeeID;
		console.log('Database: URL call: ' + url);
		
		return new Promise(resolve => {
			this.httpCall.get(url).subscribe(
				response => {resolve(response.json());
				},
				err => {
					if (err.status == "412") {
						console.log("App and API versions don't match.");
						var emptyJSONArray = {};
						resolve(emptyJSONArray);
					} else {
						console.log(err.status);
						console.log("API Error: ", err);
					}
				}
			);
		});
			
	}

	public getSearchData(flags, AttendeeID) {

		console.log("flags passed: " + flags);
		console.log("AttendeeID passed: " + AttendeeID);
		
		var searchTerms = flags || '';
		
		// Perform query against server-based MySQL database
		var url = APIURLReference + "action=searchquery&flags=" + flags + "&AttendeeID=" + AttendeeID;

		return new Promise(resolve => {
			this.httpCall.get(url).subscribe(
				response => {resolve(response.json());
				},
				err => {
					if (err.status == "412") {
						console.log("App and API versions don't match.");
						var emptyJSONArray = {};
						resolve(emptyJSONArray);
					} else {
						console.log(err.status);
						console.log("API Error: ", err);
					}
				}
			);
		});
			
	}

	public getNotesData(flags, AttendeeID) {

		console.log("flags passed: " + flags);
		console.log("AttendeeID passed: " + AttendeeID);

		var flagValues = flags.split("|");
		var selectedDay = flagValues[0];    
		var listingType = flagValues[1];
		var EventID = flagValues[2];    
		var NoteID = flagValues[3];    
		var NoteText = flagValues[4];    
		var LastUpdated = flagValues[5];    
		var SQLquery = "";
		
		// Perform query against server-based MySQL database
		var url = APIURLReference + "action=notesquery&flags=" + flags + "&AttendeeID=" + AttendeeID;

		return new Promise(resolve => {
			this.httpCall.get(url).subscribe(
				response => {resolve(response.json());
				},
				err => {
					if (err.status == "412") {
						console.log("App and API versions don't match.");
						var emptyJSONArray = {};
						resolve(emptyJSONArray);
					} else {
						console.log(err.status);
						console.log("API Error: ", err);
					}
				}
			);
		});
			
	}

	public getDatabaseStats(flags, AttendeeID) {

		console.log("flags passed: " + flags);
		console.log("AttendeeID passed: " + AttendeeID);

		var flagValues = flags.split("|");
		var listingType = flagValues[0];
		var listingParameter = flagValues[1];
		var listingValue = flagValues[2];
		var AttendeeProfileTitle = flagValues[3];
		var AttendeeProfileOrganization = flagValues[4];
		
		// Perform query against server-based MySQL database
		var url = APIURLReference + "action=statsquery&flags=" + flags + "&AttendeeID=" + AttendeeID;

		return new Promise(resolve => {
			this.httpCall.get(url).subscribe(
				response => {resolve(response.json());
				},
				err => {
					if (err.status == "412") {
						console.log("App and API versions don't match.");
						var emptyJSONArray = {};
						resolve(emptyJSONArray);
					} else {
						console.log(err.status);
						console.log("API Error: ", err);
					}
				}
			);
		});
			
	}

	// -----------------------------------
	// 
	// Messaging Functions
	// 
	// -----------------------------------
	public getMessagingData(flags, AttendeeID) {

		console.log("flags passed: " + flags);
		console.log("AttendeeID passed: " + AttendeeID);

		var flagValues = flags.split("|");
		var listingType = flagValues[0];
		var sortingType = flagValues[1];
		var receiverID = flagValues[2];
		var pnTitle = flagValues[3];
		var pnMessage = flagValues[4];
		var DateTimeReceived = flagValues[5];
		
		// Perform query against server-based MySQL database
		var url = APIURLReference + "action=msgquery&flags=" + flags + "&AttendeeID=" + AttendeeID;

		return new Promise(resolve => {
			this.httpCall.get(url).subscribe(
				response => {
					console.log('msgquery response: ' + JSON.stringify(response.json()));
					resolve(response.json());
				},
				err => {
					if (err.status == "412") {
						console.log("App and API versions don't match.");
						var emptyJSONArray = {};
						resolve(emptyJSONArray);
					} else {
						console.log(err.status);
						console.log("API Error: ", err);
					}
				}
			);
		});
			
	}
	
}