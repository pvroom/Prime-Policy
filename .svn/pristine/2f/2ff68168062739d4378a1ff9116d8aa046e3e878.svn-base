// Components, functions, plugins
import { Component, ChangeDetectionStrategy, ChangeDetectorRef, NgModule } from '@angular/core';
import { IonicPage, NavController, NavParams, LoadingController, AlertController, Events } from 'ionic-angular';
import { Storage } from '@ionic/storage';
import { Http } from '@angular/http';
import 'rxjs/add/operator/map';
import { Database } from './../../providers/database/database';
import { Localstorage } from './../../providers/localstorage/localstorage';
import { LeafletDirective } from '@asymmetrik/ngx-leaflet/dist';
import * as L from "leaflet";

// Pages
import { LoginPage } from '../login/login';
import { MyAgenda } from '../myagenda/myagenda';

declare var dateFormat: any;

@IonicPage()
@Component({
  selector: 'page-meetingdetails',
  templateUrl: 'meetingdetails.html',
  changeDetection: ChangeDetectionStrategy.OnPush
})

export class MeetingDetailsPage {

	// Meeting Details
	public EventID: string;
	public EventName: string;
	public EventSubName: string;
	public DisplayEventTimeDate: string;
	public DisplayEventLocation: string;
	public EventTypeName: string;
	public EventDetails: string;
	public sessionAbstract: string;
	
	// Control Buttons
	public visAgendaAddRemoveButton: string;
	public btnAgendaManagement = true;
	public AgendaButtonColor: string = '#ffffff';
	public AgendaButtonTextColor: string = '#F15D22';

	public btnNotes = true;
	public btnPrint = true;
	public btnEval = false;
	
	// SubSection Control
	public CongressionalMemberDisplay = false;
	public DescriptionDisplay = true;

	public CongressionalMemberList: any[] = [];
	
	// Leaflet mapping variables
	myMap: any;

	constructor(public navCtrl: NavController, 
				public navParams: NavParams,
				private storage: Storage,
				private databaseprovider: Database,
				private cd: ChangeDetectorRef,
				private alertCtrl: AlertController, 
				public events: Events,
				public loadingCtrl: LoadingController,
				private localstorage: Localstorage) {
	}

	ionViewDidLoad() {
		console.log('ionViewDidLoad MeetingDetailsPage');
	}

	mcqAnswer(value){
	   console.log(value);
	}
		
	ngOnInit() {

		var AttendeeID = this.localstorage.getLocalValue('AttendeeID');
		
		if (AttendeeID == '' || AttendeeID == null) {
			AttendeeID = '0';
		}

		// Load initial data set here
		//let loading = this.loadingCtrl.create({
		//	spinner: 'crescent',
		//	content: 'Please wait...'
		//});

		//loading.present();

		// Blank and show loading info
		this.cd.markForCheck();
		
		// Temporary use variables
		var flags = "dt|0|" + this.navParams.get('EventID');
		this.EventID = this.navParams.get('EventID');
		this.localstorage.setLocalValue('EventID', this.navParams.get('EventID'));
		
        // ---------------------
        // Get Meeting Details
        // ---------------------

        var SQLDate;
        var DisplayDateTime;
		var DisplayName;
		var visDisplayPartyState;
        var dbEventDateTime;
        var UpdatedEventDescription;
        var UpdatedEventDescription2;

		console.log('Meeting Details, flags: ' + flags);
		
        // Get course detail record
		this.databaseprovider.getAgendaData(flags, AttendeeID).then(data => {
			
			console.log("getAgendaData: " + JSON.stringify(data));

			if (data['length']>0) {

                dbEventDateTime = data[0].StartDateTime;
                dbEventDateTime = dbEventDateTime.replace(/-/g, '/');
                dbEventDateTime = dbEventDateTime.replace(/T/g, ' ');
                SQLDate = new Date(dbEventDateTime);
                DisplayDateTime = dateFormat(SQLDate, "mm/dd h:MMtt");

                // Display end time
                dbEventDateTime = data[0].EndDateTime;
                dbEventDateTime = dbEventDateTime.replace(/-/g, '/');
                dbEventDateTime = dbEventDateTime.replace(/T/g, ' ');
                SQLDate = new Date(dbEventDateTime);
                DisplayDateTime = DisplayDateTime + " to " + dateFormat(SQLDate, "h:MMtt");
				this.DisplayEventTimeDate = DisplayDateTime;
				
                if ((data[0].EventName === undefined) || (data[0].EventName === "") || (data[0].EventName === null)) {
					var tempTitle = "Meeting with ";
					tempTitle = tempTitle + data[0].FirstName + " " + data[0].LastName;
					tempTitle = tempTitle + " (" + data[0].Party.charAt(0) + " - " + data[0].State + ")";
                    this.EventName = tempTitle;
                } else {
					this.EventName = data[0].EventName;
                }
				
				
                if ((data[0].EventLocation === undefined) || (data[0].EventLocation === "") || (data[0].EventLocation === null)) {
                    this.DisplayEventLocation = data[0].Address;
                } else {
                    this.DisplayEventLocation = data[0].EventLocation;
                }
				
                // Values for Agenda Management
                //this.localstorage.setLocalValue("AAOID", data[0].session_id);
                //this.localstorage.setLocalValue("EventStartTime", data[0].session_start_time.substring(11,19));
                //this.localstorage.setLocalValue("EventEndTime", data[0].session_end_time.substring(11,19));
                //this.localstorage.setLocalValue("EventLocation", data[0].RoomName);
                //this.localstorage.setLocalValue("EventName", data[0].session_title);
                //this.localstorage.setLocalValue("EventDate", data[0].session_start_time.substring(0,10));

                //if (data[0].OnAgenda != null) {
                //    this.visAgendaAddRemoveButton = "Remove";
				//	this.AgendaButtonColor = '#F15D22';
				//	this.AgendaButtonTextColor = '#ffffff';
                //} else {
                //    this.visAgendaAddRemoveButton = "Add";
				//	this.AgendaButtonColor = '#ffffff';
				//	this.AgendaButtonTextColor = '#F15D22';
                //}
				
                if ((data[0].EventDescription === undefined) || (data[0].EventDescription === "") || (data[0].EventDescription === null)) {
                    this.DescriptionDisplay = false;
                } else {
	                UpdatedEventDescription2 = data[0].EventDescription;
					UpdatedEventDescription2 = UpdatedEventDescription2.replace(/\\/g, '');
					this.sessionAbstract = UpdatedEventDescription2;
                    this.DescriptionDisplay = true;
				}
				
				// ---------------------------
                // Get Linked Congressional Members
                // ---------------------------

                this.CongressionalMemberDisplay = false;
				
                if ((data[0].congressionalMemberID === undefined) || (data[0].congressionalMemberID === "") || (data[0].congressionalMemberID === null)) {

				} else {
					
                    DisplayName = "";

                    // Concatenate fields to build displayable name
                    DisplayName = DisplayName + data[0].LastName;
					
                    if (data[0].Suffix != "" && data[0].Suffix != null) {
                        DisplayName = DisplayName + " " + data[0].Suffix;
                    }

					DisplayName = DisplayName + ", " + data[0].FirstName;
					
                    if (data[0].MiddleInitial != "" && data[0].MiddleInitial != null) {
                        DisplayName = DisplayName + " " + data[0].MiddleInitial;
                    }
					
                    visDisplayPartyState = data[0].Party + " - " + data[0].State;

					var imageAvatar = data[0].imageFilename;
					imageAvatar = "assets/img/CongressionalMembers/" + imageAvatar;

					this.CongressionalMemberList.push({
						Avatar: imageAvatar,
						navigationArrow: "arrow-dropright",
						cmID: data[0].congressionalMemberID,
						DisplayNameLastFirst: DisplayName,
						DisplayPartyState: visDisplayPartyState
					});

					this.CongressionalMemberDisplay = true;

				
				}
			
				// --------------------
                // Session room mapping
				// --------------------
				console.log('Session room mapping');
                var y = 0;
                var x = 0;
                var RoomName = "";
				var FloorNumber = "";

                if (data[0].RoomY != null) {
                    y = data[0].RoomY;
                    x = data[0].RoomX;
					RoomName = data[0].RoomName;
					FloorNumber = data[0].FloorNumber;
                } else {
                    y = 0;
                    x = 0;
					RoomName = "n/a";
					FloorNumber = "2";
				}
				
				console.log("Session room (x,y): " + x + ", " + y);
				console.log("Session floor: " + FloorNumber);
				
                if ((x === undefined) || (y === undefined)) {
                    // Show empty map
					console.log('Show empty map');
                    this.myMap = L.map('map2', {
                        crs: L.CRS.Simple,
                        minZoom: 0,
                        maxZoom: 2,
                        zoomControl: false
                    });

                    var bounds = L.latLngBounds([0, 0], [1500, 2000]);    // Normally 1000, 1000; stretched to 2000,1000 for AACD 2017
                    var image = L.imageOverlay('assets/img/SessionFloorplan.png', bounds, {
                        attribution: 'Convergence'
                    }).addTo(this.myMap);

                    this.myMap.fitBounds(bounds);
					this.myMap.setMaxBounds(bounds);

                } else {

                    // Simple coordinate system mapping
					console.log('Simple coordinate system mapping');
                    this.myMap = L.map('map2', {
                        crs: L.CRS.Simple,
                        minZoom: -2,
                        maxZoom: 0,
                        zoomControl: true
                    });

					// Determine which session floorplan to display
					switch(FloorNumber) {
						case "2":
							var bounds = L.latLngBounds([0, 0], [1500, 2000]);    // Normally 1000, 1000; stretched to 2000,1000 for AACD 2017

							var image = L.imageOverlay('assets/img/SessionFloorplanLevel2.png', bounds, {
								attribution: 'Convergence'
							}).addTo(this.myMap);
							break;
						case "3":
							var bounds = L.latLngBounds([0, 0], [1500, 2000]);    // Normally 1000, 1000; stretched to 2000,1000 for AACD 2017

							var image = L.imageOverlay('assets/img/SessionFloorplanLevel3.png', bounds, {
								attribution: 'Convergence'
							}).addTo(this.myMap);
							break;
						case "4":
							var bounds = L.latLngBounds([0, 0], [1500, 2000]);    // Normally 1000, 1000; stretched to 2000,1000 for AACD 2017

							var image = L.imageOverlay('assets/img/SessionFloorplanLevel4.png', bounds, {
								attribution: 'Convergence'
							}).addTo(this.myMap);
							break;
							
					}
					
                    this.myMap.fitBounds(bounds);
					this.myMap.setMaxBounds(bounds);

					if (RoomName != "n/a") {
						var MeetingName = L.latLng([y, x]);
						L.marker(MeetingName).addTo(this.myMap)
							.bindPopup(RoomName)
							.openPopup();
					}
					
                    this.myMap.setView([y, x], 1);

                }
				
				this.cd.markForCheck();
		
			}
			
		}).catch(function () {
			console.log("Course Promise Rejected");
		});

	}

    CongressionalMemberDetails(cmID) {
		
		if (cmID != "0") {

			this.navCtrl.push('CongressionalDetailsPage', {cmID: cmID}, {animate: true, direction: 'forward'});

		}

    };

    printWindow() {
        window.open('https://www.google.com/cloudprint/#printers', '_system');
    };

    openPDF(PDFURL) {
        var ref = window.open(PDFURL, '_system');
    };

    navToMyAgenda() {

		var AttendeeID = this.localstorage.getLocalValue('AttendeeID');
		if (AttendeeID != '' && AttendeeID != null) {
			// If not, store the page they want to go to and go to the Login page
			console.log('Stored AttendeeID: ' + AttendeeID);
			this.localstorage.setLocalValue('NavigateToPage', "MyAgenda");
			this.navCtrl.push(LoginPage, {}, {animate: true, direction: 'forward'});
		} else {
			// Otherwise just go to the page they want
			this.navCtrl.push(MyAgenda, {}, {animate: true, direction: 'forward'});
		}

	};

    navToNotes(EventID) {

		console.log("NoteDetails: " + EventID);

		var AttendeeID = this.localstorage.getLocalValue('AttendeeID');
		if (AttendeeID == '' || AttendeeID == null) {
			// If not, store the page they want to go to and go to the Login page
			console.log('Stored AttendeeID: ' + AttendeeID);
			this.localstorage.setLocalValue('NavigateToPage', "NotesDetailsPage");
			this.navCtrl.push(LoginPage, {}, {animate: true, direction: 'forward'});
		} else {
			// Otherwise just go to the page they want
			this.navCtrl.push('NotesDetailsPage', {EventID: EventID}, {animate: true, direction: 'forward'});
		}

	};
	
    AgendaManagement() {
		
		console.log("Begin AgendaManagement process...");

		var AttendeeID = this.localstorage.getLocalValue('AttendeeID');

        var AAOID = this.localstorage.getLocalValue("AAOID");
        var EventID = this.localstorage.getLocalValue("EventID");
        var EventStartTime = this.localstorage.getLocalValue("EventStartTime");
        var EventEndTime = this.localstorage.getLocalValue("EventEndTime");
        var EventLocation = this.localstorage.getLocalValue("EventLocation");
        var EventName = this.localstorage.getLocalValue("EventName");
		EventName = EventName.replace(/'/g, "''");
        var EventDate = this.localstorage.getLocalValue("EventDate");

		var flags = '';
		
		// Starting variables
		console.log("AttendeeID: " + AttendeeID);
		console.log("AAOID: " + AAOID);
		console.log("EventID: " + EventID);
		console.log("EventStartTime: " + EventStartTime);
		console.log("EventEndTime: " + EventEndTime);
		console.log("EventLocation: " + EventLocation);
		console.log("EventName: " + EventName);
		console.log("EventDate: " + EventDate);

		this.cd.markForCheck();
		
		var LastUpdateDate = "";

		LastUpdateDate = new Date().toISOString().replace(/T/, ' ').replace(/\..+/, '');

        if (this.visAgendaAddRemoveButton == "Add") {

            // ------------------------
            // Add item to Agenda
            // ------------------------
			flags = 'ad|0|' + EventID + '|' + EventStartTime + '|' + EventEndTime + '|' + EventLocation + '|' + EventName + '|' + EventDate + '|' + AAOID + '|' + LastUpdateDate;
			console.log("flags: " + flags);
			
			this.databaseprovider.getAgendaData(flags, AttendeeID).then(data => {
				
				console.log("getAgendaData: " + JSON.stringify(data));

				if (data['length']>0) {

                    console.log("Return status: " + data[0].AddStatus);

					if (data[0].AddStatus == "Success") {
						
						this.events.publish('user:Status', 'AgendaItem Add');
						this.visAgendaAddRemoveButton = "Remove";
						this.AgendaButtonColor = '#F15D22';
						this.AgendaButtonTextColor = '#ffffff';
						this.cd.markForCheck();
						
					} else {
						
						console.log("Return query: " + data[0].AddQuery);
						
						let alert = this.alertCtrl.create({
							title: 'Agenda Item',
							subTitle: 'Unable to add the item to your agenda at this time. Please try again shortly.',
							buttons: ['OK']
						});
						
						alert.present();
						
					}
					
				}

			}).catch(function () {
				console.log("Promise Rejected");
			});
			
        } else {

            // -----------------------
            // Remove Item from Agenda
            // -----------------------
			flags = 'dl|0|' + EventID + '|' + EventStartTime + '|' + EventEndTime + '|' + EventLocation + '|' + EventName + '|' + EventDate + '|' + AAOID + '|' + LastUpdateDate;
			console.log("flags: " + flags);
			
			this.databaseprovider.getAgendaData(flags, AttendeeID).then(data => {
				
				console.log("getAgendaData: " + JSON.stringify(data));

				if (data['length']>0) {

                    console.log("Return status: " + data[0].DeleteStatus);

					if (data[0].DeleteStatus == "Success") {
						
						this.events.publish('user:Status', 'AgendaItem Remove');
						this.visAgendaAddRemoveButton = "Add";
						this.AgendaButtonColor = '#ffffff';
						this.AgendaButtonTextColor = '#F15D22';
						this.cd.markForCheck();
						
					} else {
						
						console.log("Return query: " + data[0].DeleteQuery);
						
						let alert = this.alertCtrl.create({
							title: 'Agenda Item',
							subTitle: 'Unable to remove the item from your agenda at this time. Please try again shortly.',
							buttons: ['OK']
						});
						
						alert.present();
						
					}
					
				}

			}).catch(function () {
				console.log("Promise Rejected");
			});

        }

    };
	
}
